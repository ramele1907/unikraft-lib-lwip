diff -urp lwip-2.0.3-orig/src/api/sockets.c src/api/sockets.c
--- a/src/api/sockets.c	2018-03-20 13:07:37.161480805 +0100
+++ b/src/api/sockets.c	2018-03-19 18:01:08.206420575 +0100
@@ -1290,6 +1290,47 @@ lwip_writev(int s, const struct iovec *i
   return lwip_sendmsg(s, &msg, 0);
 }
 
+int lwip_getsock_status(int fd)
+{
+  int flags = 0;
+#if 0
+  struct lwip_sock *sock;
+
+  SYS_ARCH_DECL_PROTECT(lev);
+  SYS_ARCH_PROTECT(lev);
+  sock = tryget_socket(fd);
+  if (sock != NULL) {
+    void* lastdata = sock->lastdata;
+    s16_t rcvevent = sock->rcvevent;
+    u16_t sendevent = sock->sendevent;
+    u16_t errevent = sock->errevent;
+    SYS_ARCH_UNPROTECT(lev);
+
+    /* ... then examine it: */
+    /* See if netconn of this socket is ready for read */
+    if ((lastdata != NULL) || (rcvevent > 0)) {
+      flags |= LWIP_SOC_RD_READY;
+      LWIP_DEBUGF(SOCKETS_DEBUG, ("%s: lwip_fd=%d ready for reading\n",
+                                  __func__, fd));
+    }
+    /* See if netconn of this socket is ready for write */
+    if (sendevent != 0) {
+      flags |= LWIP_SOC_WR_READY;
+      LWIP_DEBUGF(SOCKETS_DEBUG, ("%s: lwip_fd=%d ready for writing\n",
+                                  __func__, fd));
+    }
+    /* See if netconn of this socket had an error */
+    if (errevent != 0) {
+      flags |= LWIP_SOC_EXCEPTION;
+      LWIP_DEBUGF(SOCKETS_DEBUG, ("%s: lwip_fd=%d ready for exception\n",
+                                  __func__, fd));
+    }
+  } else {
+    SYS_ARCH_UNPROTECT(lev);
+  }
+#endif
+  return flags;
+}
 /**
  * Go through the readset and writeset lists and see which socket of the sockets
  * set in the sets has events. On return, readset, writeset and exceptset have
diff -urp src/include/lwip/sockets.h src/include/lwip/sockets.h
--- a/src/include/lwip/sockets.h	2017-03-01 23:13:14.000000000 +0100
+++ b/src/include/lwip/sockets.h	2018-03-19 17:34:49.143047601 +0100
@@ -419,6 +419,10 @@ typedef struct ip_mreq {
 #define FD_ISSET(n,p) FDSETSAFEGET(n, (p)->fd_bits[((n)-LWIP_SOCKET_OFFSET)/8] &   (1 << (((n)-LWIP_SOCKET_OFFSET) & 7)))
 #define FD_ZERO(p)    memset((void*)(p), 0, sizeof(*(p)))
 
+#define LWIP_SOC_RD_READY  0x01
+#define LWIP_SOC_WR_READY  0x02
+#define LWIP_SOC_EXCEPTION 0x04
+
 typedef struct fd_set
 {
   unsigned char fd_bits [(FD_SETSIZE+7)/8];
